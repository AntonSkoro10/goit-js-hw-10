{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nfunction addLeadingZero(value) {\n    return value < 10 ? '0' + value : value;\n}\n\nfunction convertMs(ms) {\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n    const days = Math.floor(ms / day);\n    const hours = Math.floor((ms % day) / hour);\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n}\n\nconsole.log(convertMs(2000));\nconsole.log(convertMs(140000)); \nconsole.log(convertMs(24140000)); \n\nconst dataStart = document.querySelector('[data-start]');\nconst dateTimePicker = document.querySelector('#datetime-picker');\nlet userSelectedDate;\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        userSelectedDate = selectedDates[0];\n        if (userSelectedDate < new Date()) {\n            iziToast.error({\n                title: 'Error',\n                message: 'Please choose a date in the future',\n            });\n            dataStart.disabled = true;\n        } else {\n            dataStart.disabled = false;\n        }\n    },\n};\n\nflatpickr('#datetime-picker', options);\n\ndataStart.addEventListener('click', function () {\n    this.disabled = true;\n    dateTimePicker.disabled = true;\n    const countdownInterval = setInterval(function () {\n        const currentDate = new Date()\n        const distance = userSelectedDate - currentDate\n        if (distance <= 0) {\n            clearInterval(countdownInterval)\n            iziToast.success({\n                title: 'Success',\n                message: 'Countdown finished!',\n            })\n            dataStart.disabled = false\n            dateTimePicker.disabled = false\n            return\n        }\n        const { days, hours, minutes, seconds } = convertMs(distance)\n        document.querySelector('[data-days]').innerText = addLeadingZero(days)\n        document.querySelector('[data-hours]').innerText = addLeadingZero(hours)\n        document.querySelector('[data-minutes]').innerText = addLeadingZero(minutes)\n        document.querySelector('[data-seconds]').innerText = addLeadingZero(seconds)\n    }, 1000)\n})\n"],"names":["addLeadingZero","value","convertMs","ms","days","hours","minutes","seconds","dataStart","dateTimePicker","userSelectedDate","options","selectedDates","iziToast","flatpickr","countdownInterval","distance"],"mappings":"2GAKA,SAASA,EAAeC,EAAO,CAC3B,OAAOA,EAAQ,GAAK,IAAMA,EAAQA,CACtC,CAEA,SAASC,EAAUC,EAAI,CAKnB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CAC1C,CAEA,QAAQ,IAAIL,EAAU,GAAI,CAAC,EAC3B,QAAQ,IAAIA,EAAU,IAAM,CAAC,EAC7B,QAAQ,IAAIA,EAAU,MAAQ,CAAC,EAE/B,MAAMM,EAAY,SAAS,cAAc,cAAc,EACjDC,EAAiB,SAAS,cAAc,kBAAkB,EAChE,IAAIC,EACJ,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnBF,EAAmBE,EAAc,CAAC,EAC9BF,EAAmB,IAAI,MACvBG,EAAS,MAAM,CACX,MAAO,QACP,QAAS,oCACzB,CAAa,EACDL,EAAU,SAAW,IAErBA,EAAU,SAAW,EAE5B,CACL,EAEAM,EAAU,mBAAoBH,CAAO,EAErCH,EAAU,iBAAiB,QAAS,UAAY,CAC5C,KAAK,SAAW,GAChBC,EAAe,SAAW,GAC1B,MAAMM,EAAoB,YAAY,UAAY,CAE9C,MAAMC,EAAWN,EADG,IAAI,KAExB,GAAIM,GAAY,EAAG,CACf,cAAcD,CAAiB,EAC/BF,EAAS,QAAQ,CACb,MAAO,UACP,QAAS,qBACzB,CAAa,EACDL,EAAU,SAAW,GACrBC,EAAe,SAAW,GAC1B,MACH,CACD,KAAM,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAS,EAAGL,EAAUc,CAAQ,EAC5D,SAAS,cAAc,aAAa,EAAE,UAAYhB,EAAeI,CAAI,EACrE,SAAS,cAAc,cAAc,EAAE,UAAYJ,EAAeK,CAAK,EACvE,SAAS,cAAc,gBAAgB,EAAE,UAAYL,EAAeM,CAAO,EAC3E,SAAS,cAAc,gBAAgB,EAAE,UAAYN,EAAeO,CAAO,CAC9E,EAAE,GAAI,CACX,CAAC"}